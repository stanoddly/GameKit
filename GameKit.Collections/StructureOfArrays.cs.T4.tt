<#@ template language="C#" #>
<#@ output extension=".cs" #>
using System;

namespace SoA
{
<#
for (int numValues = 1; numValues <= 10; numValues++)
{
    var typeParams = string.Join(", ", Enumerable.Range(1, numValues).Select(i => $"TValue{i}"));
    var fieldDefs = string.Join("\n        ", Enumerable.Range(1, numValues).Select(i => $"private TValue{i}[] _values{i};"));
    var paramDefs = string.Join(", ", Enumerable.Range(1, numValues).Select(i => $"TValue{i} value{i}"));
    var addValues = string.Join("\n            ", Enumerable.Range(1, numValues).Select(i => $"_values{i}[_count] = value{i};"));
    var getChecks = string.Join("\n            ", Enumerable.Range(1, numValues).Select(i => $"if (_values{i}.Length <= index) throw new ArgumentOutOfRangeException(nameof(index));"));
#>
    public class SoA<<#= typeParams #>>
    {
        private const int DefaultCapacity = 4;
        private int _count;
        <#= fieldDefs #>

        public SoA(int initialCapacity = DefaultCapacity)
        {
            if (initialCapacity < 0)
                throw new ArgumentOutOfRangeException(nameof(initialCapacity));

<#
    for (int i = 1; i <= numValues; i++)
    {
#>
            _values<#= i #> = new TValue<#= i #>[initialCapacity];
<#
    }
#>
        }

        public int Count => _count;
        public int Capacity => _values1.Length;

        private void EnsureCapacity(int minCapacity)
        {
            if (minCapacity > Capacity)
            {
                int newCapacity = Math.Max(Capacity * 2, minCapacity);
<#
    for (int i = 1; i <= numValues; i++)
    {
#>
                Array.Resize(ref _values<#= i #>, newCapacity);
<#
    }
#>
            }
        }

        public void Add(<#= paramDefs #>)
        {
            EnsureCapacity(_count + 1);
            <#= addValues #>
            _count++;
        }

        public void RemoveAt(int index)
        {
            if (index < 0 || index >= _count)
                throw new ArgumentOutOfRangeException(nameof(index));

<#
    for (int i = 1; i <= numValues; i++)
    {
#>
            if (index < _count - 1)
            {
                Array.Copy(_values<#= i #>, index + 1, _values<#= i #>, index, _count - index - 1);
            }
<#
    }
#>
            _count--;
        }

<#
    for (int i = 1; i <= numValues; i++)
    {
#>
        public TValue<#= i #> GetValue<#= i #>(int index)
        {
            if (index < 0 || index >= _count)
                throw new ArgumentOutOfRangeException(nameof(index));
            return _values<#= i #>[index];
        }

        public void SetValue<#= i #>(int index, TValue<#= i #> value)
        {
            if (index < 0 || index >= _count)
                throw new ArgumentOutOfRangeException(nameof(index));
            _values<#= i #>[index] = value;
        }

<#
    }
#>
        public void Clear()
        {
<#
    for (int i = 1; i <= numValues; i++)
    {
#>
            Array.Clear(_values<#= i #>, 0, _count);
<#
    }
#>
            _count = 0;
        }

        public void TrimExcess()
        {
            if (_count < Capacity * 0.9)
            {
                int newCapacity = Math.Max(DefaultCapacity, _count);
<#
    for (int i = 1; i <= numValues; i++)
    {
#>
                Array.Resize(ref _values<#= i #>, newCapacity);
<#
    }
#>
            }
        }
    }

<#
}
#>
}