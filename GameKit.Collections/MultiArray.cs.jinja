// Generated using jinja2-cli: jinja2 MultiArray.cs.jinja > MultiArray.cs
using System;

namespace GameKit.Collections;

{% for type in [("class", ""), ("struct", "Struct")] -%}
{% for n in range(2, 11) -%}
public {{type[0]}} MultiArray{{type[1]}}<{% for i in range(1, n + 1) %}TValue{{i}}{% if not loop.last %}, {% endif %}{% endfor %}>
{
    private const int DefaultCapacity = 32;
    private int _count;
    {% for i in range(1, n + 1) %}
    private TValue{{i}}[] _values{{i}};
    {%- endfor %}

    public MultiArray{{type[1]}}(int initialCapacity)
    {
        if (initialCapacity < 0)
            throw new ArgumentOutOfRangeException(nameof(initialCapacity));
        {% for i in range(1, n + 1) %}
        _values{{i}} = new TValue{{i}}[initialCapacity];
        {%- endfor %}
    }

    public MultiArray{{type[1]}}()
    {
        {% for i in range(1, n + 1) -%}
        _values{{i}} = new TValue{{i}}[DefaultCapacity];
        {% endfor %}
    }

    public int Count => _count;

    private void EnsureCapacity(int minCapacity)
    {
        int capacity = _values1.Length;
        if (minCapacity > capacity)
        {
            int newCapacity = Math.Max(capacity * 2, minCapacity);

            {% for i in range(1, n + 1) %}
            Array.Resize(ref _values{{i}}, newCapacity);
            {%- endfor %}
        }
    }

    public int Add({% for i in range(1, n + 1) %}TValue{{i}} value{{i}}{% if not loop.last %}, {% endif %}{% endfor %})
    {
        EnsureCapacity(_count + 1);

        {% for i in range(1, n + 1) %}
        _values{{i}}[_count] = value{{i}};
        {%- endfor %}

        return _count++;
    }

    public void Set(int index, {% for i in range(1, n + 1) %}TValue{{i}} value{{i}}{% if not loop.last %}, {% endif %}{% endfor %})
    {
        if (index < 0 || index >= _count)
            throw new ArgumentOutOfRangeException(nameof(index));
            
        {% for i in range(1, n + 1) %}
        _values{{i}}[index] = value{{i}};
        {% endfor %}
    }

    {% for i in range(1, n + 1) %}
    public Span<TValue{{i}}> Values{{i}} => new Span<TValue{{i}}>(_values{{i}}, 0, _count);
    {% endfor %}

    public bool SwapRemove(int index)
    {
        int swappedIndex = _count - 1;
        if (index != swappedIndex)
        {
            {% for i in range(1, n + 1) %}
            _values{{i}}[index] = _values{{i}}[swappedIndex];
            {%- endfor %}
            return false;
        }

        _count--;
        return true;
    }
    
    public bool TryGet(int index, {% for i in range(1, n + 1) %}out TValue{{i}} value{{i}}{% if not loop.last %}, {% endif %}{% endfor %})
    {
        if (index < _count)
        {
            {% for i in range(1, n + 1) %}
            value{{i}} = _values{{i}}[index];
            {%- endfor %}

            return true;
        }

        {% for i in range(1, n + 1) %}
        value{{i}} = default;
        {%- endfor %}
        return false;
    }
    
    public bool TryGetButFirst(int index, {% for i in range(2, n + 1) %}out TValue{{i}} value{{i}}{% if not loop.last %}, {% endif %}{% endfor %})
    {
        if (index < _count)
        {
            {% for i in range(2, n + 1) %}
            value{{i}} = _values{{i}}[index];
            {%- endfor %}

            return true;
        }

        {% for i in range(2, n + 1) %}
        value{{i}} = default;
        {%- endfor %}
        return false;
    }

    public bool SwapRemoveReturnFirst(int index, out TValue1 value1)
    {
        int swappedIndex = _count - 1;
        if (index != swappedIndex)
        {
            value1 = _values1[index];
            {% for i in range(1, n + 1) %}
            _values{{i}}[index] = _values{{i}}[swappedIndex];
            {%- endfor %}
            return true;
        }

        value1 = default!;
        _count--;
        return false;
    }

    public void Clear()
    {
        {% for i in range(1, n + 1) %}
        Array.Clear(_values{{i}}, 0, _count);
        {%- endfor %}
        _count = 0;
    }

    public void TrimExcess()
    {
        int capacity = _values1.Length;
        if (_count < capacity * 0.9)
        {
            int newCapacity = Math.Max(DefaultCapacity, _count);
            {% for i in range(1, n + 1) %}
            Array.Resize(ref _values{{i}}, newCapacity);
            {%- endfor %}
        }
    }
}

{% endfor %}
{% endfor %}
